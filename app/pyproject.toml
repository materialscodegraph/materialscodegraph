[build-system]
requires = ["setuptools>=45", "wheel", "setuptools-scm[toml]>=6.2"]
build-backend = "setuptools.build_meta"

[project]
name = "materialscodegraph-lite"
version = "1.0.0"
description = "Minimal MCP implementation for materials science workflows with full lineage tracking"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "MaterialsCodeGraph Contributors", email = "mcg@example.com"}
]
maintainers = [
    {name = "MaterialsCodeGraph Contributors", email = "mcg@example.com"}
]
keywords = ["materials science", "thermal conductivity", "lineage", "provenance", "MCP", "LAMMPS", "kALDo"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Science/Research", 
    "Topic :: Scientific/Engineering :: Chemistry",
    "Topic :: Scientific/Engineering :: Physics",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Operating System :: OS Independent",
]
requires-python = ">=3.8"
dependencies = [
    "numpy>=1.21.0",
    "mcp>=0.1.0",
    "mp-api>=0.30.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0", 
    "pytest-cov>=4.0.0",
    "black>=22.0.0",
    "flake8>=4.0.0",
    "mypy>=0.991",
]
production = [
    "lammps-python>=2023.8.15",
    "ase>=3.22.0", 
    "pymatgen>=2023.7.20",
    "psycopg2-binary>=2.9.0",
]
docs = [
    "sphinx>=4.0.0",
    "sphinx-rtd-theme>=1.0.0", 
    "myst-parser>=0.18.0",
]

[project.urls]
Homepage = "https://github.com/your-org/materialscodegraph-lite"
Documentation = "https://github.com/your-org/materialscodegraph-lite/wiki"
Repository = "https://github.com/your-org/materialscodegraph-lite"
"Bug Reports" = "https://github.com/your-org/materialscodegraph-lite/issues"
Discussions = "https://github.com/your-org/materialscodegraph-lite/discussions"

[project.scripts]
mcg = "cli.mcg:main"
mcg-interfaces = "interfaces_mcp.server:main"
mcg-compute = "compute_mcp.server:main"
mcg-memory = "memory_mcp.server:main"

[tool.setuptools]
packages = [
    "interfaces_mcp",
    "compute_mcp", 
    "compute_mcp.runners",
    "memory_mcp",
    "common",
    "cli",
    "examples",
    "tests",
]

[tool.setuptools.package-data]
"*" = ["*.md", "*.txt", "*.yml", "*.yaml"]

[tool.black]
line-length = 88
target-version = ['py38']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["interfaces_mcp", "compute_mcp", "memory_mcp", "common", "cli"]

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
show_error_codes = true

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --strict-markers"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]

[tool.coverage.run]
source = ["."]
omit = [
    "tests/*",
    "setup.py",
    "*/venv/*",
    "*/__pycache__/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]