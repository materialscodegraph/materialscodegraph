version: '3.8'

services:
  # Memory MCP - Asset and lineage storage
  memory-mcp:
    build: .
    container_name: mcg-memory
    command: ["python", "-m", "memory_mcp.server"]
    ports:
      - "8000:8000"
    environment:
      - MCG_STORAGE_PATH=/opt/mcg/data
      - MCG_LOG_LEVEL=INFO
    volumes:
      - mcg-data:/opt/mcg/data
    healthcheck:
      test: ["CMD", "python", "-c", "import memory_mcp.server; print('OK')"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Compute MCP - Simulation execution
  compute-mcp:
    build: .
    container_name: mcg-compute
    command: ["python", "-m", "compute_mcp.server"]
    ports:
      - "8001:8001"
    environment:
      - MP_API_KEY=${MP_API_KEY}
      - MCG_LOG_LEVEL=INFO
      - LAMMPS_IMAGE=lammps/lammps:stable
      - KALDO_IMAGE=kaldo/kaldo:latest
    volumes:
      - mcg-data:/opt/mcg/data
      - /var/run/docker.sock:/var/run/docker.sock  # For container execution
    depends_on:
      - memory-mcp
    healthcheck:
      test: ["CMD", "python", "-c", "import compute_mcp.server; print('OK')"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Interfaces MCP - Natural language processing
  interfaces-mcp:
    build: .
    container_name: mcg-interfaces
    command: ["python", "-m", "interfaces_mcp.server"]
    ports:
      - "8002:8002"
    environment:
      - MCG_LOG_LEVEL=INFO
    volumes:
      - mcg-data:/opt/mcg/data
    depends_on:
      - memory-mcp
      - compute-mcp
    healthcheck:
      test: ["CMD", "python", "-c", "import interfaces_mcp.server; print('OK')"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # PostgreSQL database (optional, for production)
  postgres:
    image: postgres:14-alpine
    container_name: mcg-postgres
    environment:
      - POSTGRES_DB=mcg
      - POSTGRES_USER=mcg_user
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-mcg_password}
    volumes:
      - postgres-data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U mcg_user -d mcg"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped
    profiles:
      - production

  # Redis cache (optional, for production)
  redis:
    image: redis:7-alpine
    container_name: mcg-redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    profiles:
      - production

  # Nginx reverse proxy (optional, for production)
  nginx:
    image: nginx:alpine
    container_name: mcg-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/ssl/certs:ro
    depends_on:
      - memory-mcp
      - compute-mcp
      - interfaces-mcp
    restart: unless-stopped
    profiles:
      - production

volumes:
  mcg-data:
    driver: local
  postgres-data:
    driver: local
  redis-data:
    driver: local

networks:
  default:
    name: mcg-network
    driver: bridge